# SERVICE PROVIDER

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn import model_selection
from sklearn import datasets
from sklearn import metrics
import seaborn as sns

# import iris dataset
iris = datasets.load_iris()

X = iris.data 
Y = iris.target

X_train, X_test, y_train, y_test = model_selection.train_test_split(X, Y, test_size=0.2) #, random_state=150)
print(X_train.shape)
print(y_train.shape)
print(X_test.shape)
print(y_test.shape)

pd.DataFrame(X_test).to_csv("X_test", sep=',', index=False)
pd.DataFrame(y_test).to_csv("y_test", sep=',', index=False)

lr_C = 100000
lr_solver = 'lbfgs'
lr = LogisticRegression(C=lr_C, solver=lr_solver, multi_class='multinomial')

# Create an instance of Logistic Regression Classifier and fit the data.
lr.fit(X_train, y_train)

print(lr.classes_)
print(lr.coef_)
print(lr.intercept_)

y_pred = lr.predict(X_train)

# confusion matrix
cnf_matrix = metrics.confusion_matrix(y_train, y_pred)
print(cnf_matrix)

# plot confusion matrix
class_names=[0,1]    # name of classes
fig, ax = plt.subplots()
tick_marks = np.arange(len(class_names))
plt.xticks(tick_marks, class_names)
plt.yticks(tick_marks, class_names)

# create heatmap
sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap="YlGnBu" ,fmt='g')
ax.xaxis.set_label_position("top")
plt.tight_layout()
plt.title('Confusion matrix', y=1.1)
plt.ylabel('Actual label')
plt.xlabel('Predicted label')



# Upload model parameters to smart contract

from web3 import Web3
from solc import compile_files
import json

w3 = Web3(Web3.HTTPProvider("http://127.0.0.1:7545"))
#print(w3)

# compile all contract files
contracts = compile_files(['LogRegParams.sol'])
# separate main file and link file
lrcontract = contracts.pop("LogRegParams.sol:LogisticRegressionParameters")

acctno = 0
#print(w3.eth.accounts[acctno])

# Deploy contract
    
# Instantiate and deploy contract
contract = w3.eth.contract(abi=lrcontract['abi'], bytecode=lrcontract['bin'])

# Get transaction hash from deployed contract
tx_hash = contract.deploy(transaction={'from': w3.eth.accounts[acctno]})

# Get tx receipt to get contract address
tx_receipt = w3.eth.getTransactionReceipt(tx_hash)
    
# store abi and contract address in json file
# add abi(application binary interface) and transaction reciept in json file
with open('data.json', 'w') as outfile:
    data = {
       "abi": main_contract['abi'],
       "contract_address": tx_receipt['contractAddress']
    }
    json.dump(data, outfile, indent=4, sort_keys=True)
    
# open file and extract data
with open("data.json", 'r') as f:
     datastore = json.load(f)
     abi = datastore["abi"]
     contract_address = datastore["contract_address"]

# send caller identifier 0=service provider; 1=client
w3.eth.defaultAccount = w3.eth.accounts[acctno]
lrparam1 = w3.eth.contract(address=contract_address, abi=abi)
tx_hash = lrparam1.functions.SetCaller(0)
tx_hash = tx_hash.transact()

# send LR-specific parameters to smart contract
receipt = w3.eth.waitForTransactionReceipt(tx_hash)
tx_hash = lrparam1.functions.SetLRParams(lr_C,lr_solver)
tx_hash = tx_hash.transact()

# send model parameters to smart contract
tx_hash = lrparam1.functions.SetClasses(lr.classes_[0].item(),
                                        lr.classes_[1].item(),
                                        lr.classes_[2].item())
tx_hash = tx_hash.transact()

tx_hash = lrparam1.functions.SetIntercept(int(lr.intercept_[0].item()*1e8),
                                          int(lr.intercept_[1].item()*1e8),
                                          int(lr.intercept_[2].item()*1e8))
tx_hash = tx_hash.transact()

tx_hash = lrparam1.functions.SetCoeff(int(lr.coef_[0][0].item()*1e8),
                                      int(lr.coef_[0][1].item()*1e8),
                                      int(lr.coef_[0][2].item()*1e8),
                                      int(lr.coef_[0][3].item()*1e8),
                                      int(lr.coef_[1][0].item()*1e8),
                                      int(lr.coef_[1][1].item()*1e8),
                                      int(lr.coef_[1][2].item()*1e8),
                                      int(lr.coef_[1][3].item()*1e8),
                                      int(lr.coef_[2][0].item()*1e8),
                                      int(lr.coef_[2][1].item()*1e8),
                                      int(lr.coef_[2][2].item()*1e8),
                                      int(lr.coef_[2][3].item()*1e8))
tx_hash = tx_hash.transact()



